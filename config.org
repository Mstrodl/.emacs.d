#+TITLE: Emacs Configuration
#+OPTIONS: 
#+AUTHOR: Probably someone else, idk anymore


* Foreword
  First things first, I just want to talk about what exactly this is; this is my init.el converted into an org file which is loaded by my one-line init.el which loads this org file and mangles the codeblocks in this org file and executes them
* MELPA
Yay MELPA is always nice!
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("GNU" . "https://elpa.gnu.org/packages/")
                         ("MELPA Stable" . "https://stable.melpa.org/packages/")
                         ("MELPA" . "https://melpa.org/packages/")))

(package-initialize)
#+END_SRC
* Useful things
** Bump GC threshold
~lsp-mode~ suggests I do this:
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024)) 
#+END_SRC
** Shortcut to need a package, installing if necessary
Installs a package if needed and require it
#+BEGIN_SRC emacs-lisp 
(defun require-package (package &optional min-version no-refresh)
  "Install given PACKAGE, optionally requiring MIN-VERSION.
If NO-REFRESH is non-nil, the available package lists will not be
re-downloaded in order to locate PACKAGE."
  (if (package-installed-p package min-version)
    (require package)
    (if (or (assoc package package-archive-contents) no-refresh)
        (package-install package)
      (progn
        (package-refresh-contents)
        (require-package package min-version t)))))
#+END_SRC
** Check if networkmanager is online
Checks for networkmanager online-ness for elcord init
#+BEGIN_SRC emacs-lisp
(require 'dbus)
(defun nm-is-connected()
  (equal 70 (dbus-get-property
             :system "org.freedesktop.NetworkManager" "/org/freedesktop/NetworkManager"
             "org.freedesktop.NetworkManager" "State")))
#+END_SRC
** Create a scratch buffer
#+BEGIN_SRC emacs-lisp
(defun create-scratch-buffer ()
   "create a scratch buffer"
   (interactive)
   (switch-to-buffer (get-buffer-create "*scratch*"))
   (lisp-interaction-mode)) 
(defun create-js-scratch-buffer ()
   "create a JS scratch buffer"
   (interactive)
   (switch-to-buffer (get-buffer-create "*js-scratch*"))
   (js-mode)) 
#+END_SRC
* eVIl mode
** Initialise
Require evil so we can vim good!
#+BEGIN_SRC emacs-lisp
(require-package 'evil)
(evil-mode t)
(require-package 'undo-tree)
(global-undo-tree-mode)
(evil-set-undo-system 'undo-tree)
#+END_SRC
* Options
** Indent babel source blocks
Indents code in org mode source blocks.
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC
** Debug on error
Debug our errors when they come
#+BEGIN_SRC emacs-lisp
(setf debug-on-error t)
#+END_SRC
** Babel syntax highlighting
It's ugly seeing yellow code blocks in my emacs config! Let's fix that!
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
** Hide startup screen
Hides the startup screen and jump straight to scratch buffer
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC
** Fix font size
1366x768 my beloved
#+BEGIN_SRC emacs-lisp
(if (string= (system-name) "promethium")
  (set-face-attribute 'default nil :height 150))
#+END_SRC
** Indent levels
Sets my indent levels to 2 spaces
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default standard-indent
  ;; Work laptop / CS machines are 4 spaces
  (if (or (string= (system-name) "promethium") (file-exists-p "/usr/local/dcs")) 4 2))
(setq-default tab-width standard-indent)
;; (setq-default indent-line-function 'insert-tab)

(setq-default typescript-indent-level standard-indent)
(setq-default js-indent-level standard-indent)
(setq-default js-jsx-indent-level standard-indent)
(setq-default css-indent-offset standard-indent)
(setq-default python-indent-offset standard-indent)
(setq-default c-basic-offset standard-indent)

;; Nobody to disagree with me here :)
(setq-default rust-indent-offset 2)
(setq-default c-default-style "linux")
#+END_SRC
** Disable Bell
The bell is annoying since it beeps
#+BEGIN_SRC emacs-lisp 
;; (setq ring-bell-function (quote ignore))
(setq visible-bell 1)
#+END_SRC
** Mail options
So I can send mail like RMS says...
#+BEGIN_SRC emacs-lisp
(setq mail-host-address "coolmathgames.tech")
(setq send-mail-function (quote smtpmail-send-it))
(setq smtpmail-smtp-server "mail.twc.com")
(setq smtpmail-smtp-service 587)
#+END_SRC
** Evil options
*** Searching
Set our search module that evil mode uses
#+BEGIN_SRC emacs-lisp
; (setq evil-search-module 'evil-search)
#+END_SRC
*** I have no idea what this does
Seriously it's scrolling or something I have no idea
#+BEGIN_SRC emacs-lisp
(setq evil-want-C-u-scroll t
      evil-want-C-w-in-emacs-state t)
#+END_SRC
** Keybinds
*** Org mode
Org mode keybinds!
#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
#+END_SRC 
*** Scratch stuff
Scratch buffers are super useful! C-x j opens a JS scratch buffer
# and C-x s opens an elisp scratch buffer 
#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-xj" 'create-js-scratch-buffer)
;; (define-key global-map "\C-xs" 'create-scratch-buffer)
#+END_SRC
** Mastodon
Set our mastodon instance url
#+BEGIN_SRC emacs-lisp 
(setq mastodon-instance-url "https://mastodon.memework.org")
#+END_SRC
** UI Tweaks
*** Hide Scrollbar
I think the scrollbar is ugly and takes up too much space, so I hide it
#+BEGIN_SRC emacs-lisp
(add-hook 'before-make-frame-hook (lambda ()
  (if (display-graphic-p)
    (scroll-bar-mode -1))))
(when (or (display-graphic-p) (daemonp))
    (scroll-bar-mode -1))
#+END_SRC 
*** Hide Toolbar
The toolbar is dumb, I have my VIM bindings!!
#+BEGIN_SRC emacs-lisp
(add-hook 'before-make-frame-hook (lambda ()
  (if (display-graphic-p)
    (tool-bar-mode -1))))
(when (or (display-graphic-p) (daemonp))
    (tool-bar-mode -1))
#+END_SRC
* Packages
** Load our pacakges!
*** Utilities
#+BEGIN_SRC emacs-lisp
(require-package 'package-lint)
(require-package 'flycheck)
(require-package 'auto-complete)
(setq tramp-default-method "ssh")
(add-to-list 'load-path "~/.emacs.d/load")
(require 'column-marker)
(add-hook 'prog-mode-hook (lambda () (interactive) (column-marker-3 80)))

;; (add-to-list 'load-path "~/.emacs.d/tern/emacs/")
;; (autoload 'tern-mode "tern.el" nil t)
#+END_SRC
*** Major modes
Assorted major modes...
#+BEGIN_SRC emacs-lisp
(require-package 'rust-mode)
(require-package 'yaml-mode)
(require-package 'graphql-mode)
(require-package 'markdown-mode)
(require-package 'rjsx-mode)
(require-package 'flycheck)
(require-package 'mastodon)
(require-package 'pug-mode)
(require-package 'xelb)
(require-package 'exwm)
(require-package 'lua-mode)
(require-package 'puppet-mode)
(require-package 'php-mode)
(require-package 'dts-mode)
(require-package 'dart-mode)
(setq lua-indent-evel 2)

(add-to-list 'load-path "~/.emacs.d/svelte-mode")
(require 'svelte-mode)

(add-to-list 'load-path "~/.emacs.d/dockerfile-mode")
(require 'dockerfile-mode)
(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
(add-to-list 'auto-mode-alist '("Containerfile\\'" . dockerfile-mode))
(add-to-list 'auto-mode-alist '("Dockerfile\\.[^./][^/]\\'" . dockerfile-mode))
(add-to-list 'auto-mode-alist '("Containerfile\\.[^./][^/]\\'" . dockerfile-mode))

(add-to-list 'load-path "~/.emacs.d/cmake")
(require 'cmake-mode)

(require-package 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-mode))


(add-to-list 'load-path "~/.emacs.d/elim/elisp")
;; (load-library "garak")

(require-package 'jabber)
;; (jabber-connect-all)
;; (jabber-display-roster)
(require-package 'emms)

(setq mouse-autoselect-window t
      focus-follows-mouse t)
;; (require 'exwm-config)
;; (exwm-config-default)

;; Java is fucking evil
(setq lsp-log-io t)
(setq lsp-print-io t)
(require-package 'yasnippet)
(require-package 'lsp-mode)
(require-package 'lsp-ui)
(setq lsp-completion-provider 'capf)
(setq lsp-log-io t)
(setq lsp-print-io t)
(require-package 'lsp-java)
(require 'yasnippet)
(add-hook 'java-mode-hook #'lsp)
(require-package 'company-c-headers)
(with-eval-after-load 'company
  (add-to-list 'company-backends 'company-c-headers))
(add-hook 'c-mode-hook 'company-mode)
(add-hook 'c++-mode-hook 'company-mode)
(add-hook 'scss-mode-hook 'company-mode)
(add-hook 'prog-mode-hook 'company-mode)
#+END_SRC
**** Web mode
Web mode does lots of stuff for me that I don't want
#+BEGIN_SRC emacs-lisp
(add-hook 'web-mode-hook (lambda ()
  (setq web-mode-enable-auto-closing nil)
  (setq web-mode-enable-auto-opening nil)
  (setq web-mode-enable-auto-quoting nil)
  (setq web-mode-enable-auto-pairing nil)))
#+END_SRC
**** Org mode
Org mode is good!
#+BEGIN_SRC emacs-lisp
(require-package 'org)
#+END_SRC
**** ESM Modules
Mjs needs to be added to js
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.mjs\\'" . js-mode))
#+END_SRC
**** Erlang
Erlang is a good...........
#+BEGIN_SRC emacs-lisp
;; (setq load-path (cons "/usr/lib/erlang/lib/tools-2.11.2/emacs" load-path))
;; (setq erlang-root-dir "/usr/lib/erlang")
;; (setq exec-path (cons "/usr/lib/erlang/bin" exec-path))
;; (require 'erlang-start)
#+END_SRC
**** TIDE
#+BEGIN_SRC emacs-lisp
(setq tide-format-options '(:indentSize 2 :tabSize 2))

(require-package 'tide)

(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
;; (add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)
#+END_SRC

*** Hook-ins
Hook-ins with other programs

**** Copilot
#+BEGIN_SRC emacs-lisp
(if (string= (system-name) "twinkpad")
  (progn
  (require-package 'dash)
  (require-package 's)
  (require-package 'editorconfig)

  (load-file "~/.emacs.d/copilot.el/copilot.el")
  (if (string= (system-name) "twinkpad")
    (setq copilot-node-executable "/home/mary/.local/share/nodejs-lts/bin/node"))
  (add-hook 'prog-mode-hook 'copilot-mode)

                    ; complete by copilot first, then company-mode
  (defun my-tab ()
    (interactive)
    (or (copilot-accept-completion)
      (company-indent-or-complete-common nil)))

                    ; modify company-mode behaviors
  (with-eval-after-load 'company
    ;; disable inline previews
    (delq 'company-preview-if-just-one-frontend company-frontends)

    (define-key company-mode-map (kbd "<tab>") 'my-tab)
    (define-key company-mode-map (kbd "TAB") 'my-tab)
    (define-key company-active-map (kbd "<tab>") 'my-tab)
    (define-key company-active-map (kbd "TAB") 'my-tab))))
#+END_SRC
**** Rust auto-complete
#+BEGIN_SRC emacs-lisp
(require-package 'lsp-mode)
(require 'lsp-rust)
(setq lsp-rust-server 'rust-analyzer)
(add-hook 'rust-mode-hook #'lsp) 
(add-hook 'lsp-mode-hook #'company-mode) 
#+END_SRC
**** Tern
#+BEGIN_SRC emacs-lisp
(require-package 'tern)
(with-eval-after-load 'tern
  (add-to-list 'tern-command "/usr/bin/tern"))
(require-package 'company)
(with-eval-after-load 'company
  (add-to-list 'company-backends 'company-capf))
(add-hook 'js-mode-hook (lambda ()
                           (tern-mode)
                           (company-mode)))
(defvar company-idle-delay 0)
(defvar company-minimum-prefix-length 1)
(defvar company-show-numbers t)
(defvar company-tooltip-idle-delay 0.0)
;; (define-key tern-mode-keymap (kbd "M-.") nil)
;; (define-key tern-mode-keymap (kbd "M-,") nil)
#+END_SRC
**** Elcord
Elcord lets us send rich presence!
#+BEGIN_SRC emacs-lisp
;; soon™
;; (require-package 'elcord)
(if (file-exists-p "~/projects/elcord/elcord.el")
  (load-file "~/projects/elcord/elcord.el")
  (load-file "~/.emacs.d/elcord/elcord.el"))
(elcord-mode)
#+END_SRC
   
**** Wakatime
Load our wakatime shtuff
#+BEGIN_SRC emacs-lisp
(require-package 'wakatime-mode)
(global-wakatime-mode)
#+END_SRC
**** Prettier
Prettier lets us format stuff automatically!
#+BEGIN_SRC emacs-lisp
(require-package 'prettier-js)
(add-hook 'js-mode-hook 'prettier-js-mode)
(add-hook 'typescript-mode-hook 'prettier-js-mode)
(add-hook 'scss-mode-hook 'prettier-js-mode)
(add-hook 'graphql-mode-hook 'prettier-js-mode)
(add-hook 'web-mode-hook 'prettier-js-mode)
#+END_SRC
**** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
(require-package 'rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
;; (add-hook 'js-mode-hook 'rainbow-delimiters-mode)
#+END_SRC
**** Indent Guides
#+BEGIN_SRC emacs-lisp
(require-package 'highlight-indent-guides)
(setq highlight-indent-guides-method 'character)
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
#+END_SRC
**** TeX
Enable LaTeX preview pane
#+BEGIN_SRC emacs-lisp
(require-package 'latex-preview-pane)
(latex-preview-pane-enable)
#+END_SRC
* Aesthetics
** Load theme
Load our theme to make us look nice
#+BEGIN_SRC emacs-lisp
(defvar custom-safe-themes t)
(setq custom-safe-themes
  (quote
    ("ff7625ad8aa2615eae96d6b4469fcc7d3d20b2e1ebc63b761a349bebbb9d23cb" default)))
(require-package 'dracula-theme)
(load-theme 'dracula t)
#+END_SRC
** Fira code
#+BEGIN_SRC emacs-lisp
;(add-to-list 'load-path "~/.emacs.d/lisp")
;(require 'fira-code-ligatures)
#+END_SRC
